def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = '7'

def flutterVersionName = '1.3'

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.manga.reader"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

    }

    splits {
        abi {
            reset()
            enable false
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a","arm64-v8a"
        }
    }
//    signingConfigs {
//        debug {
////            storeFile file('debug.keystore')
////            storePassword 'android'
////            keyAlias 'androiddebugkey'
////            keyPassword 'android'
//        }
//        release {
//            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
//                storeFile file(MYAPP_RELEASE_STORE_FILE)
//                storePassword MYAPP_RELEASE_STORE_PASSWORD
//                keyAlias MYAPP_RELEASE_KEY_ALIAS
//                keyPassword MYAPP_RELEASE_KEY_PASSWORD
//            }
//        }
//    }
//    buildTypes {
//        release {
//            // TODO: Add your own signing config for the release build.
//            // Signing with the debug keys for now, so `flutter run --release` works.
//            signingConfig signingConfigs.debug
//        }
//    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    compile project(path: ':ratedialog')
    implementation 'com.google.firebase:firebase-ads:18.3.0'
    implementation 'com.facebook.android:audience-network-sdk:5.+'
    implementation 'androidx.multidex:multidex:2.0.0'
}
